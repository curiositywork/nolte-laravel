<?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class Vulnerability extends Model
{
    /**
     * The attributes excluded from the model's JSON form.
     *
     * @var array
     */
    protected $hidden = [];

    /**
     * The primary key associated with the table.
     *
     * @var string
     */
    protected $primaryKey = 'id';

    /**
     * Indicates if the IDs are auto-incrementing.
     *
     * @var bool
     */
    public $incrementing = true;

    /**
     * Indicates if the model should be timestamped.
     *
     * @var bool
     */
    public $timestamps = false;


    protected $casts = [
        'references' => 'array'
    ];

    /**
     * Get the component that owns the vulnerability.
     */
    public function components()
    {
        return $this->belongsToMany(
            Component::class,
            'components_vulnerabilities',
            'vulnerability_id',
            'component_id');
    }

    /**
     * Get the feedback that owns the vulnerability.
     */
    public function feeback()
    {
        return $this->belongsToMany(
            Feedback::class,
            'feedback_vulnerabilities',
            'vulnerability_id',
            'feedback_id');
    }

    /**
     * Create a new component vulnerability.
     */

    public static function create($vuln)
    {
        $vulnerability = Vulnerability::where('title', $vuln['title'])->first();

        if (is_null($vulnerability)) {
            $vulnerability = new Vulnerability;
            $vulnerability->title = $vuln['title'];
            $vulnerability->fixed_in = $vuln['fixed_in'];
            $vulnerability->vuln_type = $vuln['vuln_type'];
            $vulnerability->references = $vuln['references'];
            $vulnerability->created_at = date("Y-m-d", strtotime($vuln['created_at']));
            $vulnerability->updated_at = date("Y-m-d", strtotime($vuln['updated_at']));
            $vulnerability->published_date = date("Y-m-d", strtotime($vuln['published_date']));
            $vulnerability->save();
        }
        return $vulnerability;
    }
}
